using Abp.Collections.Extensions;
using Abp.Extensions;
using Abp.Reflection;
using Abp.Web.Api.Modeling;
using Abp.Web.Api.ProxyScripting.Generators;
using Abp.WebApi.Controllers.Dynamic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Abp.GenerateBlazorProxies.Helpers;

namespace Abp.GenerateBlazorProxies
{
    public class BlazorProxyScriptGenerator
    {
        /// <summary>
        /// "Blazor".
        /// </summary>
        public const string Name = "Blazor";

        public string CreateScript(ApplicationApiDescriptionModel model)
        {
            var script = new StringBuilder();

            script.AppendLine("/* This file is automatically generated by ABP framework to use MVC Controllers from Blazor. */");
            script.AppendLine();
            script.AppendLine("using Microsoft.AspNetCore.Blazor;");
            script.AppendLine("using System.Net.Http;");
            script.AppendLine("using Abp.Shared;");
            GetNameSpaces(script, model);
            script.AppendLine();

            foreach (var module in model.Modules.Values)
            {
                AddModuleScript(script, module);
            }

            return script.ToString();
        }

        private void GetNameSpaces(StringBuilder script, ApplicationApiDescriptionModel model)
        {
            var namespaces = new List<string>();
            var actions = model.Modules.SelectMany(f => f.Value.Controllers).SelectMany(f => f.Value.Actions);
            foreach (var item in actions.SelectMany(f=>f.Value.Parameters).Distinct())
            {
                namespaces.Add(item.Type.Namespace);
                namespaces.AddRange(item.Type.GetGenericNamespaces());

            }
            foreach (var item in actions.Select(f => f.Value.ReturnValue).Distinct())
            {
                namespaces.Add(item.Type.Namespace);
                namespaces.AddRange(item.Type.GetGenericNamespaces());
            }
          
            foreach (var item in namespaces.Distinct())
            {
                script.AppendLine($"using {item};");
            }
        }

        private static void AddModuleScript(StringBuilder script, ModuleApiDescriptionModel module)
        {
            script.AppendLine($"namespace {module.Name}.Proxies");
            script.AppendLine("{");
            script.AppendLine($"    public class {module.Name.ToPascalCase()}Proxy");
            script.AppendLine("     {");
            script.AppendLine("         private readonly HttpClient _httpClient;");
            script.AppendLine($"        public {module.Name.ToPascalCase()}Proxy(HttpClient httpClient)");
            script.AppendLine("         {");
            script.AppendLine("             _httpClient = httpClient;");
            script.AppendLine("         }");
            foreach (var controller in module.Controllers.Values)
            {
                AddControllerScript(script, module, controller);
            
            }

            script.AppendLine("     }");
            script.AppendLine("}");
        }

        private static void AddControllerScript(StringBuilder script, ModuleApiDescriptionModel module, ControllerApiDescriptionModel controller)
        {

            
            foreach (var action in controller.Actions.Values)
            {
                script.AppendLine();
                AddActionScript(script, module, controller, action);
            }
        }

        private static void AddActionScript(StringBuilder script, ModuleApiDescriptionModel module, ControllerApiDescriptionModel controller, ActionApiDescriptionModel action)
        {
            script.AppendLine($"    //action {action.Name.ToCamelCase()}");


            AddCallParameters(script, controller, action);

            if (action.HttpMethod == "POST" || action.HttpMethod == "GET")
            {
                script.AppendLine("            if (result.success)");
                script.AppendLine("                return result.result;");
                script.AppendLine("            if (result.unAuthorizedRequest)");
                script.AppendLine("                throw new Exception(\"Unauthorized\");");
                script.AppendLine("            throw new Exception(result.error.message);");
            }
            else
            {
                script.AppendLine("            result.EnsureSuccessStatusCode();");
                script.AppendLine("            return true;");
            }
            script.AppendLine("        }");
        }

        private static void AddCallParameters(StringBuilder script, ControllerApiDescriptionModel controller, ActionApiDescriptionModel action)
        {
            var methodParamNames = action.Parameters.Select(p => $"{p.TypeAsString} {p.NameOnMethod}").Distinct().ToList();
            var parameterList = methodParamNames.JoinAsString(", ");

            var baseUrl = "/"+action.Url;
            var urlWithParameters = "/"+ BlazorProxyHelper.GenerateUrlWithParameters(action);
            var httpMethod = action.HttpMethod?.ToUpperInvariant() ?? "POST";
            var postPara = "";

            if (action.ReturnValue.Type == typeof(void))
            {
                script.AppendLine($"        public void {controller.Name}{action.Name}({parameterList})");
                script.AppendLine("        {");
            }
            else
            {
                script.AppendLine($"        public async {BlazorProxyHelper.GetCSharpRepresentation(action.ReturnValue.Type,true,false)} {controller.Name}{action.Name}({parameterList})");
                script.AppendLine("        {");
            }

            var headers = ProxyScriptingHelper.GenerateHeaders(action, 8);
            if (headers != null)
            {
                var parameters = action
                    .Parameters
                    .Where(p => p.BindingSourceId == ParameterBindingSources.Header)
                    .ToArray();
                foreach (var item in parameters)
                {
                    script.AppendLine($" _httpClient.DefaultRequestHeaders.Add(\"{item.TypeAsString}\",\"{item.NameOnMethod}\");");
                }
            }
            var url = "";
            if(httpMethod == "POST")
            {
                url = baseUrl;
                if (action.Parameters.Any() && action.Parameters.Count <= 1)
                    postPara = $", {action.Parameters.FirstOrDefault()?.NameOnMethod}";
                else if (!action.Parameters.Any())
                {
                    httpMethod = "GET";
                }
                else if (action.Parameters.Count > 1)
                    script.AppendLine("            throw new Exception(\"Can't have more than 1 parameter.\");");
            }
            else
            {
                url = urlWithParameters;
            }
            if(httpMethod == "DELETE")
            {
                script.AppendLine($"            var result = await _httpClient.{BlazorProxyHelper.FirstCharToUpper(httpMethod.ToLower())}Async(\"{url}\");");

            }else
                script.AppendLine($"            var result = await _httpClient.{BlazorProxyHelper.FirstCharToUpper(httpMethod.ToLower())}JsonAsync<ABPResult<{BlazorProxyHelper.GetCSharpRepresentation(action.ReturnValue.Type, true,true)}>>(\"{url}\"{postPara});");
        }
    }
}